;;; Automatically generated on Tue Sep 26 14:40:24 2017
;;; Invoked by YeZhao@DESKTOP-YeZhao using 25.3.1
(setq-default kill-ring '(#(";
(defun magit-just-amend ()
  (interactive)
  (save-window-excursion
    (magit-with-refresh
     (shell-command \"git --no-pager commit --amend --reuse-message=HEAD\"))))

(eval-after-load \"magit\"
  '(define-key magit-status-mode-map (kbd \"C-c C-a\") 'magit-just-amend))" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-face) 2 3 (fontified t face ...) 3 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 25 (fontified t face font-lock-function-name-face) 25 26 (fontified t) 26 27 (fontified t face ...) 27 28 (fontified t face ...) 28 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t face ...) 32 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t face ...) 44 45 (fontified t) 45 47 (fontified t) 47 48 (fontified t face ...) 48 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 74 (fontified t) 74 75 (fontified t face ...) 75 94 (fontified t) 94 99 (fontified t) 99 100 (fontified t face ...) 100 114 (fontified t) 114 166 (fontified t face font-lock-string-face) 166 167 (fontified t face ...) 167 168 (fontified t face ...) 168 169 (fontified t face ...) 169 170 (fontified t face ...) 170 171 (fontified t) 171 172 (fontified t) 172 173 (fontified t face ...) 173 189 (fontified t) 189 196 (fontified t face font-lock-string-face) 196 197 (fontified t) 197 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t face ...) 201 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t face ...) 235 239 (fontified t) 239 248 (fontified t face font-lock-string-face) 248 249 (fontified t face ...) 249 267 (fontified t) 267 268 (fontified t face ...) 268 269 (fontified t face ...)) "(eval-after-load 'magit '(require 'setup-magit))" ":;; Magit
251:(global-set-key (kbd \"C-x m\") 'magit-status-fullscreen)
252:(autoload 'magit-status-fullscreen \"magit\")
" "http://whattheemacsd.com/" ";; C-c C-a to amend without any prompt

(defun magit-just-amend ()
  (interactive)
  (save-window-excursion
    (magit-with-refresh
      (shell-command \"git --no-pager commit --amend --reuse-message=HEAD\"))))

(eval-after-load \"magit\"
  '(define-key magit-status-mode-map (kbd \"C-c C-a\") 'magit-just-amend))" "http://emacsrocks.com/e09.html" "https://segmentfault.com/a/1190000011000873" "http://emacsrocks.com/e10.html" "http://emacsrocks.com/e13.html" "(autoload
  'ace-jump-mode
  \"ace-jump-mode\"
  \"Emacs quick move minor mode\"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd \"C-c SPC\") 'ace-jump-mode)"))
(setq-default session-file-alist '(("~/.emacs.d/customizations/navigation.el" 3465 3465 1 nil nil 3465 (overwrite-mode)) ("~/.emacs.d/customizations/ui.el" 8719 8719 1 nil nil 8720 (overwrite-mode)) ("~/.emacs.d/README.md" 7143 13285 1 nil nil 6828 (overwrite-mode)) ("~/.emacs.d/hello.md" 27 40 1 nil nil 62 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/src/undead_zoobie/hello.md" 40 40 1 nil nil 48 (overwrite-mode)) ("~/.emacs.d/customizations/editing.el" 4566 4359 1 nil nil 2571 (overwrite-mode)) ("~/.emacs.d/init.el" 3617 6302 1 nil nil 6573 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/src/undead_zoobie/hello.clj" 247 247 1 nil nil 196 (overwrite-mode)) ("~/.emacs.d/elpa/ace-jump-mode-20140616.115/ace-jump-mode-autoloads.el" 1575 nil 1 nil nil 1575 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/src/undead_zoobie/system.clj" 668 668 1 nil nil 670 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/project.clj" 417 526 1 nil nil 527 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/README.md" 4 4 1 nil nil 4 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/core.clj" 2624 2624 1 nil nil 2624 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/fractal_tree.clj" 1601 1601 1 nil nil 1565 (overwrite-mode)) ("~/.emacs.d/GTD/writing.org" 1183 1183 1 nil nil 1177 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" 4 4 1 nil nil 106 (overwrite-mode)) ("~/.emacs.d/GTD/newgtd.org" 498 498 1 nil nil 982 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Site/www.site.org" 1 nil 1 nil nil 81 (overwrite-mode)) ("~/.emacs.d/elpa/paredit-menu-20160128.933/paredit-menu-autoloads.el" 250 nil 1 nil nil 250 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/a.md" 8 26 1 nil nil 48 (overwrite-mode)) ("~/.emacs.d/elpa/iy-go-to-char-20141029.846/iy-go-to-char-autoloads.el" 3225 nil 1 nil nil 3225 (overwrite-mode)) ("~/.emacs.d/elpa/key-chord-20160227.438/key-chord-autoloads.el" 2102 nil 1 nil nil 2102 (overwrite-mode)) ("e:/a.html" 11 1 1 nil nil 11 (overwrite-mode)) ("~/.emacs.d/elpa/string-edit-20160410.2356/string-edit-autoloads.el" 247 nil 1 nil nil 247 (overwrite-mode)) ("~/.emacs.d/.orgConf.el" 16621 16497 1 nil nil 16992 (overwrite-mode)) ("~/.emacs.d/GTD/writing.org_archive" 88 nil 1 nil nil 301 (overwrite-mode)) ("~/.emacs.d/customizations/perl-editing.el" 37 37 1 nil nil 37 (overwrite-mode)) ("~/.emacs.d/elpa/flycheck-20170911.127/flycheck-autoloads.el" 8429 nil 1 nil nil 8429 (overwrite-mode)) ("~/.emacs.d/CalendarDairy/diary.org" 94 94 1 nil nil 95 (overwrite-mode)) ("~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" 1705 nil 1 nil nil 1705 (overwrite-mode)) ("~/.emacs.d/elpa/company-20170828.414/company-autoloads.el" 8597 nil 1 nil nil 8597 (overwrite-mode)) ("~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" 522 nil 1 nil nil 522 (overwrite-mode)) ("~/.emacs.d/elpa/anaconda-mode-20170405.301/anaconda-mode-autoloads.el" 611 nil 1 nil nil 611 (overwrite-mode)) ("~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" 486 nil 1 nil nil 486 (overwrite-mode)) ("~/.emacs.d/elpa/f-20170404.1039/f-autoloads.el" 228 nil 1 nil nil 228 (overwrite-mode)) ("~/.emacs.d/elpa/cal-china-x-20170122.1100/cal-china-x-autoloads.el" 1379 nil 1 nil nil 1379 (overwrite-mode)) ("~/.emacs.d/diary" 27 27 1 nil nil 27 (overwrite-mode)) ("~/.emacs.d/elpa/image+-20150707.916/image+-autoloads.el" 1817 nil 1 nil nil 1817 (overwrite-mode)) ("~/.emacs.d/GTD/myPlan/2017.09.13.muse" 26 11 1 nil nil 10 (overwrite-mode)) ("~/.emacs.d/elpa/2048-game-20151026.1233/2048-game-autoloads.el" 363 nil 1 nil nil 363 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Book/book.org" 228 228 1 nil nil 243 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/IDEA/idea.org" 1 nil 1 nil nil 72 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Film/film.org" 180 nil 1 nil nil 315 (overwrite-mode)) ("f:/gtd/privnotes.org" 23 nil 1 nil nil 41 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Private/privnotes.org" 23 nil 1 nil nil 78 (overwrite-mode)) ("~/写作创意.org" 1 nil 1 nil nil 6 (overwrite-mode)) ("c:/Users/YeZhao/Desktop/emacsWithRemember/.orgConf.el" 806 839 1 nil nil 806 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170911/org-loaddefs.el" 128006 nil 1 nil nil 128006 (overwrite-mode)) ("~/.emacs.d/elpa/cider-20170905.1037/cider-autoloads.el" 11197 nil 1 nil nil 11197 (overwrite-mode)) ("~/.emacs.d/elpa/inflections-20170908.149/inflections-autoloads.el" 710 nil 1 nil nil 710 (overwrite-mode)) ("~/.emacs.d/elpa/magit-20170908.1344/magit-autoloads.el" 65108 nil 1 nil nil 65108 (overwrite-mode)) ("~/.emacs.d/elpa/multiple-cursors-20170908.1452/multiple-cursors-autoloads.el" 10368 nil 1 nil nil 10368 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170911/org-plus-contrib-autoloads.el" 51940 nil 1 nil nil 51940 (overwrite-mode)) ("~/.emacs.d/elpa/0xc-20170125.1953/0xc-autoloads.el" 590 nil 1 nil nil 590 (overwrite-mode)) ("~/.emacs.d/GTD/test.org" 119 10 1 nil nil 119 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/helo.org" 30 30 1 nil nil 30 (overwrite-mode)) ("~/.emacs.d/elpa/s-20170906.1304/s-autoloads.el" 228 nil 1 nil nil 228 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-rich-20170716.1924/ivy-rich-autoloads.el" 538 nil 1 nil nil 538 (overwrite-mode)) ("~/.emacs.d/elpa/all-the-icons-ivy-20170508.25/all-the-icons-ivy-autoloads.el" 486 nil 1 nil nil 486 (overwrite-mode)) ("~/.emacs.d/elpa/all-the-icons-dired-20170418.1431/all-the-icons-dired-autoloads.el" 492 nil 1 nil nil 492 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-dired-history-20170625.2256/ivy-dired-history-autoloads.el" 268 nil 1 nil nil 268 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-20170911.1121/counsel-autoloads.el" 9931 nil 1 nil nil 9931 (overwrite-mode)) ("~/.emacs.d/elpa/swiper-20170911.1036/swiper-autoloads.el" 618 nil 1 nil nil 618 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-20170911.1034/ivy-autoloads.el" 3941 nil 1 nil nil 3941 (overwrite-mode)) ("~/.emacs.d/elpa/rich-minority-20170813.622/rich-minority-autoloads.el" 252 nil 1 nil nil 252 (overwrite-mode)) ("~/.emacs.d/elpa/mo-git-blame-20160129.959/mo-git-blame-autoloads.el" 1302 nil 1 nil nil 1302 (overwrite-mode)) ("e:/clojure-home/clojure/pom.xml" 3061 3167 1 nil nil 3061 (overwrite-mode)) ("~/.emacs.d/elpa/evil-surround-20170910.1952/evil-surround-autoloads.el" 2205 nil 1 nil nil 2205 (overwrite-mode)) ("~/.emacs.d/elpa/evil-20170904.1346/evil-autoloads.el" 675 nil 1 nil nil 675 (overwrite-mode)) ("~/.emacs.d/elpa/undo-tree-20170706.246/undo-tree-autoloads.el" 1654 nil 1 nil nil 1654 (overwrite-mode)) ("~/.emacs.d/elpa/goto-chg-20131228.659/goto-chg-autoloads.el" 1878 nil 1 nil nil 1878 (overwrite-mode)) ("d:/cygwin/home/YeZhao/.bashrc" 6617 6637 1 nil nil 6617 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/hello.md" 2 nil 1 nil nil 2 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode+-20170320.1404/markdown-mode+-autoloads.el" 1295 nil 1 nil nil 1295 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode-20170830.2131/markdown-mode-autoloads.el" 659 nil 1 nil nil 659 (overwrite-mode)) ("f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/createFields.H" 231 97 1 nil nil 231 (overwrite-mode)) ("c:/logs/rupeng-admin/log.log" 2034 nil 1 nil nil 2034 (overwrite-mode)) ("c:/ImbaMallLog.txt" 1 1 1 nil nil 1 (overwrite-mode)) ("e:/clojure-home/emacs-25.2-x86_64/bin/hello.md" 5 1 1 nil nil 5 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/test.md" 57 41 1 nil nil 57 (overwrite-mode)) ("e:/clojure-home/hello.md" 26 1 1 nil nil 2 (overwrite-mode)) ("e:/clojure-home/a.org" 143 32 1 nil nil 320 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-5-area-of-ring.rkt" 814 1692 1 nil nil 1778 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-1-f2c.rkt" 949 690 1 nil nil 3 (overwrite-mode)) ("~/.emacs.d/elpa/scheme-complete-20170824.713/scheme-complete-autoloads.el" 256 nil 1 nil nil 256 (overwrite-mode)) ("~/.emacs.d/elpa/chicken-scheme-20141116.1139/chicken-scheme-autoloads.el" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-loaddefs.el" 121974 nil 1 nil nil 121974 (overwrite-mode)) ("~/.emacs.d/elpa/0blayout-20161007.2307/0blayout-autoloads.el" 782 nil 1 nil nil 782 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-plus-contrib-autoloads.el" 45706 nil 1 nil nil 45706 (overwrite-mode)) ("i:/xinranUbunutu/MyOrgMode/orgTest.org" 34 34 1 nil nil 34 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/customizations/ui.el" "~/.emacs.d/customizations/navigation.el" "~/.emacs.d/bookmarks" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/README.md" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/ui.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/init.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/setup-clojure.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/editing.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/navigation.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/elisp-editing.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/setup-js.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/shell-integration.el" #("c:/Users/YeZhao/AppData/Roaming/.emacs.d/hello.md" 0 49 (ivy-index 0)) #("e:/clojure-home/undead_zoobie/src/undead_zoobie/hello.md" 0 56 (ivy-index 0)) "~/.emacs.d/elpa/ace-jump-mode-20140616.115/ace-jump-mode-autoloads.el" #("e:/clojure-home/undead_zoobie/src/undead_zoobie/hello.clj" 0 57 (ivy-index 0)) #("e:/clojure-home/undead_zoobie/src/" 0 34 (ivy-index 0)) #("e:/clojure-home/undead_zoobie/project.clj" 0 41 (ivy-index 0)) "e:/clojure-home/undead_zoobie/src/undead_zoobie/system.clj" #("e:/clojure-home/undead_zoobie/src/undead_zoobie/system.clj" 0 58 (ivy-index 0)) #("e:/clojure-home/undead_zoobie/README.md" 0 39 (ivy-index 0)) #("e:/clojure-home/first-example/src/first_example/core.clj" 0 56 (ivy-index 0)) #("e:/clojure-home/first-example/src/first_example/fractal-tree.clj" 0 64 (ivy-index 0)) #("e:/clojure-flavored-javascript/" 0 31 (ivy-index 0)) "~/.emacs.d/GTD/writing.org" "~/.emacs.d/GTD/orgBoss/Site/www.site.org" "~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" "~/.emacs.d/GTD/orgBoss/Someday/someday.org" "~/.emacs.d/GTD/orgBoss/Private/privnotes.org" "~/.emacs.d/GTD/orgBoss/Journal/journal.org" "~/.emacs.d/GTD/orgBoss/IDEA/idea.org" "~/.emacs.d/GTD/orgBoss/Film/film.org" "~/.emacs.d/GTD/orgBoss/Financial/finances.org" "~/.emacs.d/GTD/orgBoss/DailyReview/daily.org" "~/.emacs.d/GTD/orgBoss/Clipboard/clipboard.org" "~/.emacs.d/GTD/orgBoss/Book/book.org" "~/.emacs.d/GTD/newgtd.org" "~/.emacs.d/elpa/paredit-menu-20160128.933/paredit-menu-autoloads.el" "~/.emacs.d/init.el" #("e:/clojure-home/first-example/src/first_example/a.md" 0 52 (ivy-index 0)) "~/.emacs.d/elpa/iy-go-to-char-20141029.846/iy-go-to-char-autoloads.el" #("e:/clojure-home/first-example/src/first_example/" 0 48 (ivy-index 0)) "~/.emacs.d/elpa/key-chord-20160227.438/key-chord-autoloads.el" "~/.emacs.d/elpa/string-edit-20160410.2356/string-edit-autoloads.el" #("e:/a.html" 0 9 (ivy-index 0)) "c:/Users/YeZhao/AppData/Roaming/.emacs.d/.orgConf.el" "c:/Users/YeZhao/Desktop/emacsWithRemember/org-toodledo/org-toodledo.el" "~/.emacs.d/GTD/writing.org_archive" "~/.emacs.d/elpa/flycheck-20170911.127/flycheck-autoloads.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/perl-editing.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/CalendarDairy/diary.org" "~/.emacs.d/CalendarDairy/diary.org" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/.gitignore" "~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" "~/.emacs.d/elpa/company-20170828.414/company-autoloads.el" "~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" "~/.emacs.d/elpa/anaconda-mode-20170405.301/anaconda-mode-autoloads.el" "~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" "~/.emacs.d/elpa/f-20170404.1039/f-autoloads.el" #("e:/clojure-home/first-example/" 0 30 (ivy-index 0)) #("e:/clojure-home/clojure/" 0 24 (ivy-index 3)) "~/.emacs.d/elpa/cal-china-x-20170122.1100/cal-china-x-autoloads.el" "~/.emacs.d/elpa/image+-20150707.916/image+-autoloads.el" "c:/Users/YeZhao/Desktop/emacsWithRemember/.custom.el" "c:/Users/YeZhao/tags" "c:/Users/YeZhao/Desktop/emacsWithRemember/.orgConf.el" "~/.emacs.d/diary" "c:/Users/YeZhao/Desktop/emacsWithRemember/init.el" "~/.emacs.d/GTD/myPlan/2017.09.13.muse" "~/.emacs.d/elpa/2048-game-20151026.1233/2048-game-autoloads.el" "f:/gtd/privnotes.org" "~/写作创意.org" "~/.emacs.d/elpa/cider-20170905.1037/cider-autoloads.el" "~/.emacs.d/elpa/inflections-20170908.149/inflections-autoloads.el" "~/.emacs.d/elpa/magit-20170908.1344/magit-autoloads.el" "~/.emacs.d/elpa/multiple-cursors-20170908.1452/multiple-cursors-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20170911/org-loaddefs.el" "~/.emacs.d/elpa/org-plus-contrib-20170911/org-plus-contrib-autoloads.el" "~/.emacs.d/elpa/0xc-20170125.1953/0xc-autoloads.el" "~/.emacs.d/elpa/s-20170906.1304/s-autoloads.el" #("c:/Users/YeZhao/AppData/Roaming/.emacs.d/GTD/test.org" 0 53 (ivy-index 0)) #("e:/clojure-home/first-example/src/first_example/helo.org" 0 56 (ivy-index 0)) #("e:/clojure-home/" 0 16 (ivy-index 0)) "~/.emacs.d/elpa/ivy-rich-20170716.1924/ivy-rich-autoloads.el" "~/.emacs.d/elpa/all-the-icons-ivy-20170508.25/all-the-icons-ivy-autoloads.el" "~/.emacs.d/elpa/all-the-icons-dired-20170418.1431/all-the-icons-dired-autoloads.el" "~/.emacs.d/elpa/ivy-dired-history-20170625.2256/ivy-dired-history-autoloads.el" "~/.emacs.d/elpa/counsel-20170911.1121/counsel-autoloads.el" "~/.emacs.d/elpa/swiper-20170911.1036/swiper-autoloads.el" "~/.emacs.d/elpa/ivy-20170911.1034/ivy-autoloads.el" "~/.emacs.d/elpa/rich-minority-20170813.622/rich-minority-autoloads.el" "~/.emacs.d/elpa/mo-git-blame-20160129.959/mo-git-blame-autoloads.el" "e:/clojure-home/clojure/pom.xml"))
(setq-default search-ring '("q"))
(setq-default regexp-search-ring '("z" "eww" "perl" "cperl" "company-mode" "sd" "df" "sdsg" "org-mode" "je" "o" "println"))
(setq-default bookmark-history '("org-capture-last-stored" #("org-remember-last-stored" 0 24 (bmkp-full-record \.\.\.)) "core.clj" #("org-agenda learning<2>" 0 19 (bmkp-full-record \.\.\.)) #("org-agenda learning" 0 19 (bmkp-full-record \.\.\.)) #("cheinsetest<2>" 0 11 (bmkp-full-record \.\.\.)) #("cheinsetest" 0 11 (bmkp-full-record \.\.\.))))
(setq-default buffer-name-history '("writing.org" "vocab.org" "calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default cider-minibuffer-history '("hello" "bar"))
(setq-default command-history '((magit-just-amend) (describe-key "
" 1 nil) (mc/mark-all-words-like-this) (iy-go-to-char 1 102) (ace-jump-word-mode 102) (ace-jump-word-mode 51) (jump-to-register 97 nil) (point-to-register 97 nil) (iy-go-to-char 1 115) (iy-go-to-char 1 103) (iy-go-to-char-backward 1 97) (iy-go-to-char 1 32) (package-install (quote ace-jump-mode) nil) (package-list-packages nil) (list-packages nil) (describe-key "" 1 nil) (string-rectangle 158 193 "this.") (cljr-create-fn-from-example) (hydra-cljr-help-menu/hydra-cljr-toplevel-form-menu/body-and-exit) (hydra-cljr-ns-menu/nil) (cljr-add-project-dependency nil) (cljr-add-import-to-ns nil) (cljr-add-use-to-ns nil) (cljr-add-declaration nil) (find-file "e:/clojure-home/undead_zoobie/src/undead_zoobie/hello.clj") (cljr-move-form) (cider-repl-set-ns "first-example.core") (emacs-version nil) (eww "http://www.baidu.com") (eww "www.baidu.com") (eww "hello") (eww-list-bookmarks) (info nil nil) (eww "http://www.scheme.com/tspl2") (kill-buffer "writing.org") (kill-buffer "vocab.org") (org-info)))
(setq-default counsel-git-grep-cmd-history '("git --no-pager grep --full-name -n --no-color -i -e \"%s\""))
(setq-default extended-command-history '("counsel-git-grep" "counsel-find-file" "swiper" "ivy-resume" "counsel-el" "counsel-git" "counsel-ag" "ivy-mode" "package-install" "undo-tree-visualizer-mode" "visual-line-mode" "mc/edit-lines" "mc/mark-next-lines" "package-list-packages" "info" "server-start" "cider-jack-in" "cua-mode" "customize" "make-frame" "paredit-mode" "run-scheme" "package-autoremove" "bookmark-bmenu-list" "bookmark-write" "bookmark-save" "bookmark-jump" "bookmark-load"))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("writing.org" "vocab.org" "calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default ido-file-history '("hello.clj" "Install.txt" "core.clj" "test.md" "hello.md" "a.org" "01-5-area-of-ring.rkt" "01-2-template-examples.rkt" "01-1-f2c.rkt"))
(setq-default ivy-history '(#("na" 0 2 (ivy-index 0)) "ui.el" "README.md" #("nav" 0 3 (ivy-index 0)) #("R" 0 1 (ivy-index 0)) #("RE" 0 2 (ivy-index 0)) #("edi" 0 3 (ivy-index 0)) #("edit" 0 4 (ivy-index 0)) #("ini" 0 3 (ivy-index 0)) #("ace-jump-mode" 0 13 (ivy-index 0)) #("http-kit" 0 8 (ivy-index 12)) "project.clj" #("fir" 0 3 (ivy-index 0)) #("logic" 0 5 (ivy-index 0)) "BUG" #("http://orgmode.org/orgcard.txt" 0 30 (ivy-index 0)) #("paredit-menu" 0 12 (ivy-index 0)) #("iy" 0 2 (ivy-index 0)) #("key-cho" 0 7 (ivy-index 0)) #("fi" 0 2 (ivy-index 0)) #("string-edit" 0 11 (ivy-index 0)) "newgtd.org" #("perl" 0 4 (ivy-index 0)) #("aut" 0 3 (ivy-index 0)) #("auto" 0 4 (ivy-index 0)) #("company" 0 7 (ivy-index 49)) #("PhaseVi mesh manufactory" 0 24 (ivy-index 0)) #("compa" 0 5 (ivy-index 0)) "core.clj" "*cider-error*" "clojure.core" #("cal-ch" 0 6 (ivy-index 0)) #("cal-c" 0 5 (ivy-index 0)) #("cal-chin" 0 8 (ivy-index 0)) #("image" 0 5 (ivy-index 1)) #("org-startup-in" 0 14 (ivy-index 0)) "2048-game" #("www.orgmode.org/manual/index.html" 0 33 (ivy-index 0)) #("战狼2" 0 3 (ivy-index 0)) #("setting CFD calculation" 0 23 (ivy-index 0)) #("Living Emacs" 0 12 (ivy-index 0)) #("Org Manual " 0 11 (ivy-index 0)) #("get the line contour from image" 0 31 (ivy-index 0)) #("caputre" 0 7 (ivy-index 0)) #("file" 0 4 (ivy-index 0)) #("zeroflag" 0 8 (ivy-index 0))))
(setq-default kmacro-ring '(([backspace] 0 "%d") ([134217790 2 23 31 134217788 f3] 2 "%d") ("\276" 0 "%d") ([134217790 0 70 S-backspace 2 4 backspace 67108918 16 5 32 32 25 backspace backspace backspace down down down down down down] 0 "%d") ([67108918 24 20 backspace 32 32 32 32 32 134217788] 0 "%d") ([67108918 24 20 backspace tab S-tab left left left left backspace right right right right 32 32 32] 0 "%d") ([67108919 24 20 31 f3 f3 f3 backspace backspace backspace] 12 "%d") ("" 0 "%d")))
(setq-default minibuffer-history '("http://www.baidu.com" "www.baidu.com" "hello" "http://www.scheme.com/tspl2" "java" "ivy-rich" "all-the-icons-ivy" "all-the-icons-dired" "ivy-dired-history" "ivy" "smart-mode-line" "mo-git-blame" "evil-define-key" "evil-surround" "file" "save" "Auth-source" "markdown-mode+" "src/first_example/core.clj" "first-example.core" "8" "scheme-complete" "chicken-scheme" "3" "core.clj"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-read-date-history '("   " "q    "))
(setq-default org-refile-history '("Tasks/TestTodo"))
(setq-default org-tags-history '("紧急重要" "@work" "laptop"))
(setq-default query-replace-history '("dgdg" "g" "fuck" "gsdg" "gdfdgg" "gsd" "hello" "foo" "file" "x" "hel"))
(setq-default read-expression-history '("w"))
(setq-default serial-name-history '("COM1"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default smex-history '(magit-log mc/mark-all-words-like-this package-install package-list-packages list-packages cljr-create-fn-from-example cljr-add-project-dependency))
(setq-default string-rectangle-history '("this." "df gf hf hf  fg  h " "sdf dfdf gsd sgsgd " "dfsdfd  fdf  fdsf  "))
(setq-default swiper-history '(#("je" 0 2 (ivy-index 0))))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default tmm--history '("h==>Help" "s==>Subdir" "i==>Immediate" "r==>Regexp" "m==>Mark" "O==>Operate" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
