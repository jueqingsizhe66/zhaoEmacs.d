;;; Automatically generated on Mon Oct  2 15:41:10 2017
;;; Invoked by YeZhao@DESKTOP-YeZhao using 25.3.1
(setq-default kill-ring '(";; better bullets
(font-lock-add-keywords 'org-mode
                        '((\"^ +\\\\([-*]\\\\) \"
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"•\"))))))" #(";; better bullets
(font-lock-add-keywords 'org-mode
                        '((\"^ +\\\\([-*]\\\\) \"
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"•\"))))))" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face \.\.\.) 19 77 (fontified t) 77 78 (fontified t face \.\.\.) 78 79 (fontified t face \.\.\.) 79 83 (fontified t face font-lock-string-face) 83 85 (fontified t face \.\.\.) 85 86 (fontified t face \.\.\.) 86 90 (fontified t face font-lock-string-face) 90 92 (fontified t face \.\.\.) 92 93 (fontified t face \.\.\.) 93 95 (fontified t face font-lock-string-face) 95 96 (fontified t) 96 123 (fontified t) 123 124 (fontified t face \.\.\.) 124 126 (fontified t) 126 127 (fontified t face \.\.\.) 127 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 134 (fontified t face \.\.\.) 134 135 (fontified t face \.\.\.) 135 136 (fontified t) 136 137 (fontified t face \.\.\.) 137 152 (fontified t) 152 153 (fontified t face \.\.\.) 153 170 (fontified t) 170 171 (fontified t face \.\.\.) 171 172 (fontified t) 172 173 (fontified t face \.\.\.) 173 184 (fontified t) 184 185 (fontified t face \.\.\.) 185 186 (fontified t) 186 189 (fontified t face font-lock-string-face) 189 190 (fontified t face \.\.\.) 190 191 (fontified t face \.\.\.) 191 192 (fontified t face \.\.\.) 192 193 (fontified t face \.\.\.) 193 194 (fontified t face \.\.\.) 194 195 (fontified t face \.\.\.)) "http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html" "(font-lock-add-keywords 'org-mode
                        '((\"^ +\\\\([-*]\\\\) \"
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"•\"))))))" "(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))"))
(setq-default session-file-alist '(("~/.emacs.d/README.md" 23030 21593 1 nil nil 23018 (overwrite-mode)) ("~/.emacs.d/.orgConf.el" 35603 33343 1 nil nil 35604 (overwrite-mode)) ("~/.emacs.d/GTD/newgtd.org" 1687 1687 1 nil nil 2015 (overwrite-mode)) ("e:/firstReport/report.org" 23 23 1 nil nil 58 (overwrite-mode)) ("~/.emacs.d/elpa/org-bullets-20140918.1137/org-bullets-autoloads.el" 409 nil 1 nil nil 409 (overwrite-mode)) ("~/.emacs.d/init.el" 5172 7969 1 nil nil 7298 (overwrite-mode)) ("e:/firstReport/conclusion.org" 67 1 1 nil nil 68 (overwrite-mode)) ("e:/firstReport/results.org" 58 nil 1 nil nil 58 (overwrite-mode)) ("e:/firstReport/NS.org" 69 1 1 nil nil 68 (overwrite-mode)) ("e:/firstReport/Introduction.org" 5 1 1 nil nil 6 (overwrite-mode)) ("e:/firstReport/abstraction.org" 6 1 1 nil nil 7 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Note/notes.org" 4766 1 1 nil nil 1 (overwrite-mode)) ("e:/firstReport/Readme.md" 32 nil 1 nil nil 33 (overwrite-mode)) ("~/.emacs.d/elpa/datomic-snippets-20130707.1315/datomic-snippets-autoloads.el" 647 nil 1 nil nil 647 (overwrite-mode)) ("~/.emacs.d/elpa/angular-snippets-20140513.2223/angular-snippets-autoloads.el" 638 nil 1 nil nil 638 (overwrite-mode)) ("~/.emacs.d/elpa/buster-snippets-20151125.210/buster-snippets-autoloads.el" 581 nil 1 nil nil 581 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170925/org-loaddefs.el" 128006 nil 1 nil nil 128006 (overwrite-mode)) ("~/.emacs.d/elpa/all-the-icons-20170914.129/all-the-icons-autoloads.el" 1711 nil 1 nil nil 1711 (overwrite-mode)) ("~/.emacs.d/elpa/anaconda-mode-20170924.704/anaconda-mode-autoloads.el" 611 nil 1 nil nil 611 (overwrite-mode)) ("~/.emacs.d/elpa/async-20170916.2256/async-autoloads.el" 4130 nil 1 nil nil 4130 (overwrite-mode)) ("~/.emacs.d/elpa/cider-20171001.112/cider-autoloads.el" 11197 nil 1 nil nil 11197 (overwrite-mode)) ("~/.emacs.d/elpa/company-20170926.1515/company-autoloads.el" 9168 nil 1 nil nil 9168 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-projectile-20171001.641/counsel-projectile-autoloads.el" 1835 nil 1 nil nil 1835 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-20170930.737/counsel-autoloads.el" 10033 nil 1 nil nil 10033 (overwrite-mode)) ("~/.emacs.d/elpa/evil-20170930.1440/evil-autoloads.el" 675 nil 1 nil nil 675 (overwrite-mode)) ("~/.emacs.d/elpa/js2-mode-20170930.820/js2-mode-autoloads.el" 1628 nil 1 nil nil 1628 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode-20171001.730/markdown-mode-autoloads.el" 659 nil 1 nil nil 659 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-projectile-20170922.1526/counsel-projectile-autoloads.el" 270 nil 1 nil nil 270 (overwrite-mode)) ("~/.emacs.d/elpa/dash-20170924.2240/dash-autoloads.el" 234 nil 1 nil nil 234 (overwrite-mode)) ("~/.emacs.d/elpa/git-commit-20170914.258/git-commit-autoloads.el" 1225 nil 1 nil nil 1225 (overwrite-mode)) ("~/.emacs.d/elpa/goto-chg-20170917.1200/goto-chg-autoloads.el" 1878 nil 1 nil nil 1878 (overwrite-mode)) ("~/.emacs.d/elpa/hydra-20170924.2259/hydra-autoloads.el" 2312 nil 1 nil nil 2312 (overwrite-mode)) ("~/.emacs.d/elpa/ido-completing-read+-20170820.3/ido-completing-read+-autoloads.el" 3233 nil 1 nil nil 3233 (overwrite-mode)) ("~/.emacs.d/elpa/ido-ubiquitous-20170923.842/ido-ubiquitous-autoloads.el" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/.emacs.d/elpa/inflections-20170913.216/inflections-autoloads.el" 710 nil 1 nil nil 710 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-20170926.915/ivy-autoloads.el" 3941 nil 1 nil nil 3941 (overwrite-mode)) ("~/.emacs.d/elpa/magit-20170929.2231/magit-autoloads.el" 65108 nil 1 nil nil 65108 (overwrite-mode)) ("~/.emacs.d/elpa/magit-popup-20170918.1116/magit-popup-autoloads.el" 277 nil 1 nil nil 277 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode-20170925.912/markdown-mode-autoloads.el" 252 nil 1 nil nil 252 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170925/org-plus-contrib-autoloads.el" 51940 nil 1 nil nil 51940 (overwrite-mode)) ("~/.emacs.d/elpa/projectile-20170917.410/projectile-autoloads.el" 16787 nil 1 nil nil 16787 (overwrite-mode)) ("~/.emacs.d/elpa/rainbow-delimiters-20170929.432/rainbow-delimiters-autoloads.el" 740 nil 1 nil nil 740 (overwrite-mode)) ("~/.emacs.d/elpa/s-20170922.900/s-autoloads.el" 228 nil 1 nil nil 228 (overwrite-mode)) ("~/.emacs.d/elpa/swiper-20170926.937/swiper-autoloads.el" 618 nil 1 nil nil 618 (overwrite-mode)) ("~/.emacs.d/elpa/with-editor-20170927.1838/with-editor-autoloads.el" 277 nil 1 nil nil 277 (overwrite-mode)) ("~/.emacs.d/elpa/yasnippet-20170923.1646/yasnippet-autoloads.el" 1606 nil 1 nil nil 1606 (overwrite-mode)) ("e:/BaiduYunDownload/FAST816/Source/b.f90" 129 111 1 nil nil 111 (overwrite-mode)) ("e:/BaiduYunDownload/FAST816/Source/a.90" 41 41 1 nil nil 19 (overwrite-mode)) ("~/.emacs.d/customizations/fortran-editing.el" 361 361 1 nil nil 440 (overwrite-mode)) ("e:/BaiduYunDownload/FAST816/Source/FAST_Prog.f90" 9333 9333 1 nil nil 7837 (overwrite-mode)) ("e:/BaiduYunDownload/FAST816/Source/FAST_Mods.f90" 660 660 1 nil nil 1615 (overwrite-mode)) ("~/.emacs.d/elpa/deferred-20170901.630/deferred-autoloads.el" 242 nil 1 nil nil 242 (overwrite-mode)) ("~/.emacs.d/elpa/fortpy-20150715.1332/fortpy-autoloads.el" 4105 nil 1 nil nil 4105 (overwrite-mode)) ("~/.emacs.d/elpa/request-deferred-20160419.1605/request-deferred-autoloads.el" 266 nil 1 nil nil 266 (overwrite-mode)) ("~/.emacs.d/elpa/request-20170131.1747/request-autoloads.el" 240 nil 1 nil nil 240 (overwrite-mode)) ("e:/BaiduYunDownload/FAST/Source/FAST_IO.f90" 1578 nil 1 nil nil 1578 (overwrite-mode)) ("~/.emacs.d/customizations/magnars/setup-js2-mode.el" 684 684 1 nil nil 9699 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/src/undead_zoobie/test.clj" 140 140 1 nil nil 140 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/src/undead_zoobie/system.clj" 694 694 1 nil nil 455 (overwrite-mode)) ("e:/clojure-home/undead_zoobie/project.clj" 1 1 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/epc-20140609.2234/epc-autoloads.el" 263 nil 1 nil nil 263 (overwrite-mode)) ("~/.emacs.d/elpa/concurrent-20161228.1930/concurrent-autoloads.el" 246 nil 1 nil nil 246 (overwrite-mode)) ("~/.emacs.d/elpa/ctable-20140304.1659/ctable-autoloads.el" 238 nil 1 nil nil 238 (overwrite-mode)) ("~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" 1705 nil 1 nil nil 1705 (overwrite-mode)) ("~/.emacs.d/elpa/python-environment-20150310.153/python-environment-autoloads.el" 327 nil 1 nil nil 327 (overwrite-mode)) ("~/.emacs.d/.git/COMMIT_EDITMSG" 42 323 1 nil nil 42 (overwrite-mode)) ("~/.emacs.d/GTD/writing.org" 1029 1029 1 nil nil 1029 (overwrite-mode)) ("e:/.emacs.d/init.el" 4460 4460 1 nil nil nil (overwrite-mode)) ("~/.emacs.d/.gitignore" 24 24 1 nil nil 24 (overwrite-mode)) ("~/.emacs.d/elpa/web-mode-20170906.214/web-mode-autoloads.el" 242 nil 1 nil nil 242 (overwrite-mode)) ("~/.emacs.d/elpa/use-package-20170812.2256/use-package-autoloads.el" 3899 nil 1 nil nil 3899 (overwrite-mode)) ("~/.emacs.d/elpa/flycheck-pos-tip-20170504.1504/flycheck-pos-tip-autoloads.el" 1340 nil 1 nil nil 1340 (overwrite-mode)) ("~/.emacs.d/elpa/pos-tip-20150318.813/pos-tip-autoloads.el" 240 nil 1 nil nil 240 (overwrite-mode)) ("~/.emacs.d/elpa/flycheck-clojure-20170221.1354/flycheck-clojure-autoloads.el" 266 nil 1 nil nil 266 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-coffee-20170722.1846/flymake-coffee-autoloads.el" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-easy-20140818.55/flymake-easy-autoloads.el" 250 nil 1 nil nil 250 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-projectile-20170911.1304/counsel-projectile-autoloads.el" 270 nil 1 nil nil 270 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/core.clj" 105 448 1 nil nil 448 (overwrite-mode)) ("~/.emacs.d/customizations/ui.el" 1192 1190 1 nil nil 1192 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Habit/habits.org" 169 nil 1 nil nil 54 (overwrite-mode)) ("~/.emacs.d/a.org" 78 78 1 nil nil 79 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Someday/someday.org" 23 nil 1 nil nil 41 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Site/www.site.org" 1 714 1 nil nil 969 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" 126 126 1 nil nil nil (overwrite-mode)) ("~/.emacs.d/elpa/bind-key-20161218.1520/bind-key-autoloads.el" 242 nil 1 nil nil 242 (overwrite-mode)) ("~/.emacs.d/customizations/navigation.el" 3845 3741 1 nil nil 3846 (overwrite-mode)) ("~/.emacs.d/customizations/editing.el" 4857 4857 1 nil nil 4935 (overwrite-mode)) ("~/.emacs.d/elpa/engine-mode-20170812.2007/engine-mode-autoloads.el" 2169 nil 1 nil nil 2169 (overwrite-mode)) ("~/.emacs.d/customizations/ace.png" 378 377 1 nil nil 378 (overwrite-mode)) ("e:/clojure-home/a.html" 165 286 1 nil nil 286 (overwrite-mode)) ("~/.emacs.d/customizations/magnars/setup-html-mode.el" 2647 2648 1 nil nil 2647 (overwrite-mode)) ("~/.emacs.d/elpa/simplezen-20130421.300/simplezen-autoloads.el" 244 nil 1 nil nil 244 (overwrite-mode)) ("~/.emacs.d/elpa/zencoding-mode-20140213.22/zencoding-mode-autoloads.el" 1408 nil 1 nil nil 1408 (overwrite-mode)) ("e:/clojure-home/a.md" 1 1 1 nil nil 1 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/README.md" "~/.emacs.d/.orgConf.el" "~/.emacs.d/GTD/newgtd.org" "~/.emacs.d/bookmarks" "~/.emacs.d/GTD/orgBoss/Habit/habits.org" "~/.emacs.d/GTD/writing.org" "~/.emacs.d/GTD/orgBoss/Site/www.site.org" "~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" "~/.emacs.d/GTD/orgBoss/Someday/someday.org" "~/.emacs.d/GTD/orgBoss/Private/privnotes.org" "~/.emacs.d/GTD/orgBoss/Journal/journal.org" "~/.emacs.d/GTD/orgBoss/IDEA/idea.org" "~/.emacs.d/GTD/orgBoss/Film/film.org" "~/.emacs.d/GTD/orgBoss/Financial/finances.org" "~/.emacs.d/GTD/orgBoss/DailyReview/daily.org" "~/.emacs.d/GTD/orgBoss/Clipboard/clipboard.org" "~/.emacs.d/GTD/orgBoss/Book/book.org" "e:/firstReport/report.org" "~/.emacs.d/elpa/org-bullets-20140918.1137/org-bullets-autoloads.el" "~/.emacs.d/init.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/.orgConf.el" "e:/firstReport/conclusion.org" "e:/firstReport/results.org" "e:/firstReport/NS.org" "e:/firstReport/Introduction.org" "e:/firstReport/abstraction.org" "e:/firstReport/Readme.md" "~/.emacs.d/GTD/orgBoss/Note/notes.org" #("e:/clojure-home/test-clojure1/src/test_clojure1/core.clj" 0 56 (ivy-index 0)) "~/.emacs.d/elpa/datomic-snippets-20130707.1315/datomic-snippets-autoloads.el" "~/.emacs.d/elpa/angular-snippets-20140513.2223/angular-snippets-autoloads.el" "~/.emacs.d/elpa/buster-snippets-20151125.210/buster-snippets-autoloads.el" "~/.emacs.d/elpa/all-the-icons-20170914.129/all-the-icons-autoloads.el" "~/.emacs.d/elpa/anaconda-mode-20170924.704/anaconda-mode-autoloads.el" "~/.emacs.d/elpa/async-20170916.2256/async-autoloads.el" "~/.emacs.d/elpa/cider-20171001.112/cider-autoloads.el" "~/.emacs.d/elpa/company-20170926.1515/company-autoloads.el" "~/.emacs.d/elpa/counsel-projectile-20171001.641/counsel-projectile-autoloads.el" "~/.emacs.d/elpa/counsel-20170930.737/counsel-autoloads.el" "~/.emacs.d/elpa/evil-20170930.1440/evil-autoloads.el" "~/.emacs.d/elpa/js2-mode-20170930.820/js2-mode-autoloads.el" "~/.emacs.d/elpa/markdown-mode-20171001.730/markdown-mode-autoloads.el" "~/.emacs.d/elpa/counsel-projectile-20170922.1526/counsel-projectile-autoloads.el" "~/.emacs.d/elpa/dash-20170924.2240/dash-autoloads.el" "~/.emacs.d/elpa/git-commit-20170914.258/git-commit-autoloads.el" "~/.emacs.d/elpa/goto-chg-20170917.1200/goto-chg-autoloads.el" "~/.emacs.d/elpa/hydra-20170924.2259/hydra-autoloads.el" "~/.emacs.d/elpa/ido-completing-read+-20170820.3/ido-completing-read+-autoloads.el" "~/.emacs.d/elpa/ido-ubiquitous-20170923.842/ido-ubiquitous-autoloads.el" "~/.emacs.d/elpa/inflections-20170913.216/inflections-autoloads.el" "~/.emacs.d/elpa/ivy-20170926.915/ivy-autoloads.el" "~/.emacs.d/elpa/magit-20170929.2231/magit-autoloads.el" "~/.emacs.d/elpa/magit-popup-20170918.1116/magit-popup-autoloads.el" "~/.emacs.d/elpa/markdown-mode-20170925.912/markdown-mode-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20170925/org-loaddefs.el" "~/.emacs.d/elpa/org-plus-contrib-20170925/org-plus-contrib-autoloads.el" "~/.emacs.d/elpa/projectile-20170917.410/projectile-autoloads.el" "~/.emacs.d/elpa/rainbow-delimiters-20170929.432/rainbow-delimiters-autoloads.el" "~/.emacs.d/elpa/s-20170922.900/s-autoloads.el" "~/.emacs.d/elpa/swiper-20170926.937/swiper-autoloads.el" "~/.emacs.d/elpa/with-editor-20170927.1838/with-editor-autoloads.el" "~/.emacs.d/elpa/yasnippet-20170923.1646/yasnippet-autoloads.el" "e:/BaiduYunDownload/FAST816/Source/b.f90" #("e:/BaiduYunDownload/FAST816/Source/b.f90" 0 40 (ivy-index 0)) "e:/BaiduYunDownload/FAST816/Source/FAST_Prog.f90" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/fortran-editing.el" #("e:/BaiduYunDownload/FAST816/Source/a.90" 0 39 (ivy-index 0)) #("e:/BaiduYunDownload/FAST816/Source/FAST_Prog.f90" 0 48 (ivy-index 0)) #("e:/BaiduYunDownload/FAST816/sr" 0 30 (ivy-index 0)) "e:/BaiduYunDownload/FAST816/Source/FAST_Mods.f90" "~/.emacs.d/elpa/deferred-20170901.630/deferred-autoloads.el" "~/.emacs.d/elpa/fortpy-20150715.1332/fortpy-autoloads.el" "~/.emacs.d/elpa/request-deferred-20160419.1605/request-deferred-autoloads.el" "~/.emacs.d/elpa/request-20170131.1747/request-autoloads.el" #("e:/BaiduYunDownload/" 0 20 (ivy-index 0)) "e:/BaiduYunDownload/FAST/Source/tags" "e:/BaiduYunDownload/FAST/Source/FAST_IO.f90" #("e:/BaiduYunDownload/FAST/" 0 25 (ivy-index 0)) "~/.emacs.d/elpa/epc-20140609.2234/epc-autoloads.el" "~/.emacs.d/elpa/concurrent-20161228.1930/concurrent-autoloads.el" "~/.emacs.d/elpa/ctable-20140304.1659/ctable-autoloads.el" "~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" "~/.emacs.d/elpa/python-environment-20150310.153/python-environment-autoloads.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/magnars/setup-js2-mode.el" #("e:/clojure-home/undead_zoobie/src/undead_zoobie/test.clj" 0 56 (ivy-index 0))))
(setq-default search-ring '("q"))
(setq-default regexp-search-ring '("setup-js2-mode" "setup-js-mode" "sa" "f" "zen" "ze" "file" "rename" "move" "git" "magit" "z" "eww" "perl" "cperl" "company-mode"))
(setq-default bookmark-history '("README.md" #("org-remember-last-stored<2>" 0 24 (bmkp-full-record \.\.\.)) "org-capture-last-stored" #("org-remember-last-stored" 0 24 (bmkp-full-record \.\.\.)) "core.clj" #("org-agenda learning<2>" 0 19 (bmkp-full-record \.\.\.)) #("org-agenda learning" 0 19 (bmkp-full-record \.\.\.)) #("cheinsetest<2>" 0 11 (bmkp-full-record \.\.\.)) #("cheinsetest" 0 11 (bmkp-full-record \.\.\.))))
(setq-default buffer-name-history '("irc.com:6667" "notes.org" "writing.org" "newgtd.org" ".gitignore" "*Org Agenda*" "vocab.org" "calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default cider-minibuffer-history '("hello" "bar"))
(setq-default command-history '((uncomment-region (region-beginning) (region-end) nil) (comment-box (region-beginning) (region-end) 1) (package-install (quote org-bullets) nil) (kill-buffer "irc.com:6667") (kill-buffer "notes.org") (magit-log-all (quote \.\.\.) nil) (magit-tag "source20171002" "origin/develop" nil) (magit-push "develop" "origin/develop" nil) (magit-tag "work20171002" "origin/develop" nil) (magit-tag "work20171002" "develop" nil) (package-install (quote datomic-snippets) nil) (package-install (quote angular-snippets) nil) (package-install (quote buster-snippets) nil) (package-list-packages nil) (package-autoremove) (package-reinstall (quote counsel)) (shell nil) (f90-mode) (fortpy-goto-definition nil nil nil) (fortpy-goto-definition-next nil) (fortpy-show-doc) (fia/toggle) (fortpy-install-server) (package-reinstall (quote deferred)) (package-reinstall (quote fortpy)) (package-refresh-contents) (package-install (quote request-deferred) nil)))
(setq-default counsel-M-x-history '(#("^un" 0 3 (ivy-index 0)) #("^com" 0 4 (ivy-index 0)) #("^package" 0 8 (ivy-index 0)) #("^magit-log-all" 0 14 (ivy-index 0)) #("^" 0 1 (ivy-index 1)) #("^magit-p" 0 8 (ivy-index 0)) #("^magit-tag" 0 10 (ivy-index 0)) #("^magit-" 0 7 (ivy-index 0)) #("^package-list-packages" 0 22 (ivy-index 0)) #("^package-au" 0 11 (ivy-index 0)) #("^package-rein" 0 13 (ivy-index 0)) #("^package-install" 0 16 (ivy-index 0)) #("^package-li" 0 11 (ivy-index 0)) #("^sh" 0 3 (ivy-index 0)) #("^f90-mode" 0 9 (ivy-index 0)) #("^fortpy" 0 7 (ivy-index 19)) #("^fortpy-goto-definition" 0 23 (ivy-index 0)) #("^fortpy-show-doc" 0 16 (ivy-index 0)) #("^fia" 0 4 (ivy-index 0)) #("^fo" 0 3 (ivy-index 0)) #("^packag" 0 7 (ivy-index 0)) #("^package-re" 0 11 (ivy-index 1)) #("^pack" 0 5 (ivy-index 0)) #("^fortpy-in" 0 10 (ivy-index 0)) #("^packa" 0 6 (ivy-index 0)) #("^mag" 0 4 (ivy-index 0)) #("^cljr-prom" 0 10 (ivy-index 0)) #("^magi" 0 5 (ivy-index 0)) #("^cljr-remo" 0 10 (ivy-index 0)) #("^cljr-add-mi" 0 12 (ivy-index 0)) #("^cljr-add-s" 0 11 (ivy-index 0)) #("^cljr-cycle-p" 0 13 (ivy-index 0)) #("^cljr-un" 0 8 (ivy-index 1)) #("^cljr-thread-fir" 0 16 (ivy-index 0)) #("^cljr-thread-last-all" 0 21 (ivy-index 0)) #("^m" 0 2 (ivy-index 0)) #("^package-in" 0 11 (ivy-index 0)) #("^package-delete" 0 15 (ivy-index 0)) #("^package-autoremove" 0 19 (ivy-index 0)) #("^proje" 0 6 (ivy-index 0)) #("^projectile-mode" 0 16 (ivy-index 0)) #("^pa" 0 3 (ivy-index 0)) #("^org-agenda-filter-by-category" 0 30 (ivy-index 0)) #("^pac" 0 4 (ivy-index 0)) #("^org-narr" 0 9 (ivy-index 2)) #("^my" 0 3 (ivy-index 1)) #("^org-clock-re" 0 13 (ivy-index 0)) #("^my/" 0 4 (ivy-index 3))))
(setq-default counsel-describe-symbol-history '(#("^iy-go-to-char" 0 14 (ivy-index 5))))
(setq-default counsel-git-grep-cmd-history '("git --no-pager grep --full-name -n --no-color -i -e \"%s\""))
(setq-default extended-command-history '("counsel-git-grep" "counsel-find-file" "swiper" "ivy-resume" "counsel-el" "counsel-git" "counsel-ag" "ivy-mode" "package-install" "undo-tree-visualizer-mode" "visual-line-mode" "mc/edit-lines" "mc/mark-next-lines" "package-list-packages" "info" "server-start" "cider-jack-in" "cua-mode" "customize" "make-frame" "paredit-mode" "run-scheme" "package-autoremove" "bookmark-bmenu-list" "bookmark-write" "bookmark-save" "bookmark-jump" "bookmark-load"))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("irc.com:6667" "notes.org" "writing.org" "newgtd.org" ".gitignore" "*Org Agenda*" "vocab.org" "calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default ido-file-history '("FAST_Library.f90" "." "qd" "hello.clj" "Install.txt" "core.clj" "test.md" "hello.md" "a.org" "01-5-area-of-ring.rkt" "01-2-template-examples.rkt" "01-1-f2c.rkt"))
(setq-default ivy-history '(#("RE" 0 2 (ivy-index 0)) #(".orgCon" 0 7 (ivy-index 0)) #("new" 0 3 (ivy-index 0)) #("n" 0 1 (ivy-index 0)) #("README.md" 0 9 (ivy-index 0)) #("rep" 0 3 (ivy-index 0)) #("org-bu" 0 6 (ivy-index 0)) #("repo" 0 4 (ivy-index 0)) "notes.org" #("note" 0 4 (ivy-index 0)) #("tomato time" 0 11 (ivy-index 0)) "4:00" #("First Report for your graduation" 0 32 (ivy-index 0)) #("datom" 0 5 (ivy-index 0)) #("angular-sni" 0 11 (ivy-index 0)) #("buster-sni" 0 10 (ivy-index 0)) #("buster-s" 0 8 (ivy-index 0)) #("counsel" 0 7 (ivy-index 1)) #("b.f90" 0 5 (ivy-index 0)) #("FA" 0 2 (ivy-index 0)) "a.90" "FAST_Prog.f90" #("ini" 0 3 (ivy-index 0)) #("FAS" 0 3 (ivy-index 0)) #("defer" 0 5 (ivy-index 1)) #("for" 0 3 (ivy-index 0)) #("init" 0 4 (ivy-index 0))))
(setq-default kmacro-ring '(([backspace] 0 "%d") ([134217790 2 23 31 134217788 f3] 2 "%d") ("\276" 0 "%d") ([134217790 0 70 S-backspace 2 4 backspace 67108918 16 5 32 32 25 backspace backspace backspace down down down down down down] 0 "%d") ([67108918 24 20 backspace 32 32 32 32 32 134217788] 0 "%d") ([67108918 24 20 backspace tab S-tab left left left left backspace right right right right 32 32 32] 0 "%d") ([67108919 24 20 31 f3 f3 f3 backspace backspace backspace] 12 "%d") ("" 0 "%d")))
(setq-default magit-revision-history '("origin/develop" #("source20171002" 0 14 (ivy-index 0)) "develop" "work20171002" #("work20171002" 0 12 (ivy-index 0)) "ORIG_HEAD"))
(setq-default minibuffer-history '("m" "k" "project.clj" ".gitignore" "themes/spacemacs-theme" "spacemacs-theme" "use-package" "README.md" "home" "\"F708\"" "F708" "f708" "http://pages.sachachua.com/.emacs.d/Sacha.html" "https://www.baidu.com" "www.baidu.com" "www.site.org" "init.el" "http://www.baidu.com" "hello" "http://www.scheme.com/tspl2" "java" "ivy-rich" "all-the-icons-ivy" "all-the-icons-dired" "ivy-dired-history" "ivy" "smart-mode-line" "mo-git-blame" "evil-define-key" "evil-surround" "file" "save" "Auth-source" "markdown-mode+" "src/first_example/core.clj" "first-example.core" "8" "scheme-complete" "chicken-scheme" "3" "core.clj"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-read-date-history '("   " "    " "2017-09-01    " "q    "))
(setq-default org-refile-history '("Tasks/TestTodo"))
(setq-default org-tags-history '("@F708" #("@work" 0 5 (ivy-index 0)) "PERSONAL" #("multiAxis" 0 9 (ivy-index 0)) "NOTE" "mode" "紧急重要" "laptop"))
(setq-default query-replace-history '("dov" "div" "dgdg" "g" "fuck" "gsdg" "gdfdgg" "gsd" "hello" "foo" "file" "x" "hel"))
(setq-default read-expression-history '("w"))
(setq-default serial-name-history '("COM1"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("dir" "ls"))
(setq-default smex-history '(comment-box uncomment-region package-install magit-log-all magit-tag magit-push package-list-packages))
(setq-default string-rectangle-history '("this." "df gf hf hf  fg  h " "sdf dfdf gsd sgsgd " "dfsdfd  fdf  fdsf  "))
(setq-default swiper-history '(#("je" 0 2 (ivy-index 0))))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default tmm--history '("h==>Help" "s==>Subdir" "i==>Immediate" "r==>Regexp" "m==>Mark" "O==>Operate" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
