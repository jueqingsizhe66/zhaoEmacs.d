;;; Automatically generated on Mon Sep 18 11:30:34 2017
;;; Invoked by YeZhao@DESKTOP-YeZhao using 25.2.1
(setq-default kill-ring '(#("（" 0 1 (face \.\.\. fontified t)) "
;; company anything!
(add-hook 'after-init-hook 'global-company-mode)" "(add-hook 'after-init-hook 'global-company-mode)"))
(setq-default session-file-alist '(("~/.emacs.d/init.el" 2583 7242 1 nil nil 2583 (overwrite-mode)) ("~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" 1705 nil 1 nil nil 1705 (overwrite-mode)) ("~/.emacs.d/customizations/editing.el" 4325 4255 1 nil nil 4326 (overwrite-mode)) ("~/.emacs.d/.orgConf.el" 14283 14283 1 nil nil 13893 (overwrite-mode)) ("~/.emacs.d/elpa/company-20170828.414/company-autoloads.el" 8597 nil 1 nil nil 8597 (overwrite-mode)) ("~/.emacs.d/GTD/newgtd.org" 841 841 1 nil nil 943 (overwrite-mode)) ("~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" 522 nil 1 nil nil 522 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/core.clj" 795 795 1 nil nil 796 (overwrite-mode)) ("~/.emacs.d/elpa/anaconda-mode-20170405.301/anaconda-mode-autoloads.el" 611 nil 1 nil nil 611 (overwrite-mode)) ("~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" 486 nil 1 nil nil 486 (overwrite-mode)) ("~/.emacs.d/elpa/f-20170404.1039/f-autoloads.el" 228 nil 1 nil nil 228 (overwrite-mode)) ("~/.emacs.d/README.md" 14083 8559 1 nil nil 14083 (overwrite-mode)) ("~/.emacs.d/CalendarDairy/diary.org" 45 14 1 nil nil 45 (overwrite-mode)) ("~/.emacs.d/elpa/cal-china-x-20170122.1100/cal-china-x-autoloads.el" 1379 nil 1 nil nil 1379 (overwrite-mode)) ("~/.emacs.d/diary" 27 27 1 nil nil 27 (overwrite-mode)) ("~/.emacs.d/elpa/image+-20150707.916/image+-autoloads.el" 1817 nil 1 nil nil 1817 (overwrite-mode)) ("~/.emacs.d/GTD/myPlan/2017.09.13.muse" 26 11 1 nil nil 10 (overwrite-mode)) ("~/.emacs.d/elpa/2048-game-20151026.1233/2048-game-autoloads.el" 363 nil 1 nil nil 363 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Book/book.org" 228 228 1 nil nil 243 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" 23 nil 1 nil nil 62 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/IDEA/idea.org" 1 nil 1 nil nil 72 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Film/film.org" 180 nil 1 nil nil 315 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Site/www.site.org" 1 nil 1 nil nil 48 (overwrite-mode)) ("f:/gtd/privnotes.org" 23 nil 1 nil nil 41 (overwrite-mode)) ("~/.emacs.d/GTD/orgBoss/Private/privnotes.org" 23 nil 1 nil nil 78 (overwrite-mode)) ("~/写作创意.org" 1 nil 1 nil nil 6 (overwrite-mode)) ("c:/Users/YeZhao/Desktop/emacsWithRemember/.orgConf.el" 806 839 1 nil nil 806 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170911/org-loaddefs.el" 128006 nil 1 nil nil 128006 (overwrite-mode)) ("~/.emacs.d/elpa/cider-20170905.1037/cider-autoloads.el" 11197 nil 1 nil nil 11197 (overwrite-mode)) ("~/.emacs.d/elpa/inflections-20170908.149/inflections-autoloads.el" 710 nil 1 nil nil 710 (overwrite-mode)) ("~/.emacs.d/elpa/magit-20170908.1344/magit-autoloads.el" 65108 nil 1 nil nil 65108 (overwrite-mode)) ("~/.emacs.d/elpa/multiple-cursors-20170908.1452/multiple-cursors-autoloads.el" 10368 nil 1 nil nil 10368 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170911/org-plus-contrib-autoloads.el" 51940 nil 1 nil nil 51940 (overwrite-mode)) ("~/.emacs.d/elpa/0xc-20170125.1953/0xc-autoloads.el" 590 nil 1 nil nil 590 (overwrite-mode)) ("~/.emacs.d/GTD/test.org" 119 10 1 nil nil 119 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/helo.org" 30 30 1 nil nil 30 (overwrite-mode)) ("~/.emacs.d/elpa/s-20170906.1304/s-autoloads.el" 228 nil 1 nil nil 228 (overwrite-mode)) ("~/.emacs.d/customizations/navigation.el" 2413 3119 1 nil nil 2413 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-rich-20170716.1924/ivy-rich-autoloads.el" 538 nil 1 nil nil 538 (overwrite-mode)) ("~/.emacs.d/elpa/all-the-icons-ivy-20170508.25/all-the-icons-ivy-autoloads.el" 486 nil 1 nil nil 486 (overwrite-mode)) ("~/.emacs.d/elpa/all-the-icons-dired-20170418.1431/all-the-icons-dired-autoloads.el" 492 nil 1 nil nil 492 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-dired-history-20170625.2256/ivy-dired-history-autoloads.el" 268 nil 1 nil nil 268 (overwrite-mode)) ("~/.emacs.d/elpa/counsel-20170911.1121/counsel-autoloads.el" 9931 nil 1 nil nil 9931 (overwrite-mode)) ("~/.emacs.d/elpa/swiper-20170911.1036/swiper-autoloads.el" 618 nil 1 nil nil 618 (overwrite-mode)) ("~/.emacs.d/elpa/ivy-20170911.1034/ivy-autoloads.el" 3941 nil 1 nil nil 3941 (overwrite-mode)) ("~/.emacs.d/elpa/rich-minority-20170813.622/rich-minority-autoloads.el" 252 nil 1 nil nil 252 (overwrite-mode)) ("~/.emacs.d/elpa/mo-git-blame-20160129.959/mo-git-blame-autoloads.el" 1302 nil 1 nil nil 1302 (overwrite-mode)) ("e:/clojure-home/clojure/pom.xml" 3061 3167 1 nil nil 3061 (overwrite-mode)) ("~/.emacs.d/elpa/evil-surround-20170910.1952/evil-surround-autoloads.el" 2205 nil 1 nil nil 2205 (overwrite-mode)) ("~/.emacs.d/elpa/evil-20170904.1346/evil-autoloads.el" 675 nil 1 nil nil 675 (overwrite-mode)) ("~/.emacs.d/elpa/undo-tree-20170706.246/undo-tree-autoloads.el" 1654 nil 1 nil nil 1654 (overwrite-mode)) ("~/.emacs.d/elpa/goto-chg-20131228.659/goto-chg-autoloads.el" 1878 nil 1 nil nil 1878 (overwrite-mode)) ("d:/cygwin/home/YeZhao/.bashrc" 6617 6637 1 nil nil 6617 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/hello.md" 2 nil 1 nil nil 2 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode+-20170320.1404/markdown-mode+-autoloads.el" 1295 nil 1 nil nil 1295 (overwrite-mode)) ("~/.emacs.d/elpa/markdown-mode-20170830.2131/markdown-mode-autoloads.el" 659 nil 1 nil nil 659 (overwrite-mode)) ("f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/createFields.H" 231 97 1 nil nil 231 (overwrite-mode)) ("c:/logs/rupeng-admin/log.log" 2034 nil 1 nil nil 2034 (overwrite-mode)) ("c:/ImbaMallLog.txt" 1 1 1 nil nil 1 (overwrite-mode)) ("e:/clojure-home/emacs-25.2-x86_64/bin/hello.md" 5 1 1 nil nil 5 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/test.md" 57 41 1 nil nil 57 (overwrite-mode)) ("e:/clojure-home/hello.md" 26 1 1 nil nil 2 (overwrite-mode)) ("e:/clojure-home/a.org" 143 32 1 nil nil 320 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-5-area-of-ring.rkt" 814 1692 1 nil nil 1778 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-1-f2c.rkt" 949 690 1 nil nil 3 (overwrite-mode)) ("~/.emacs.d/elpa/scheme-complete-20170824.713/scheme-complete-autoloads.el" 256 nil 1 nil nil 256 (overwrite-mode)) ("~/.emacs.d/elpa/chicken-scheme-20141116.1139/chicken-scheme-autoloads.el" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-loaddefs.el" 121974 nil 1 nil nil 121974 (overwrite-mode)) ("~/.emacs.d/elpa/0blayout-20161007.2307/0blayout-autoloads.el" 782 nil 1 nil nil 782 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-plus-contrib-autoloads.el" 45706 nil 1 nil nil 45706 (overwrite-mode)) ("i:/xinranUbunutu/MyOrgMode/orgTest.org" 34 34 1 nil nil 34 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/elpa/auto-complete-20170124.1845/auto-complete-autoloads.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/init.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/ui.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/setup-clojure.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/editing.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/customizations/navigation.el" "~/.emacs.d/elpa/company-20170828.414/company-autoloads.el" "c:/Users/YeZhao/AppData/Roaming/.emacs.d/.orgConf.el" "~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" "~/.emacs.d/GTD/orgBoss/Someday/someday.org" "~/.emacs.d/GTD/orgBoss/Private/privnotes.org" "~/.emacs.d/GTD/orgBoss/Journal/journal.org" "~/.emacs.d/GTD/orgBoss/Film/film.org" "~/.emacs.d/GTD/orgBoss/Financial/finances.org" "~/.emacs.d/GTD/orgBoss/DailyReview/daily.org" "~/.emacs.d/GTD/orgBoss/Clipboard/clipboard.org" "~/.emacs.d/GTD/orgBoss/Book/book.org" "~/.emacs.d/GTD/newgtd.org" "~/.emacs.d/bookmarks" "~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" "~/.emacs.d/elpa/anaconda-mode-20170405.301/anaconda-mode-autoloads.el" "~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" "~/.emacs.d/elpa/f-20170404.1039/f-autoloads.el" "~/.emacs.d/init.el" "e:/clojure-home/first-example/src/first_example/core.clj" #("e:/clojure-home/first-example/" 0 30 (ivy-index 0)) #("e:/clojure-home/clojure/" 0 24 (ivy-index 3)) "c:/Users/YeZhao/AppData/Roaming/.emacs.d/README.md" "~/.emacs.d/CalendarDairy/diary.org" "~/.emacs.d/elpa/cal-china-x-20170122.1100/cal-china-x-autoloads.el" "~/.emacs.d/elpa/image+-20150707.916/image+-autoloads.el" "c:/Users/YeZhao/Desktop/emacsWithRemember/.custom.el" "c:/Users/YeZhao/tags" "c:/Users/YeZhao/Desktop/emacsWithRemember/.orgConf.el" "~/.emacs.d/diary" "~/.emacs.d/GTD/orgBoss/Site/www.site.org" "c:/Users/YeZhao/Desktop/emacsWithRemember/init.el" "~/.emacs.d/GTD/myPlan/2017.09.13.muse" "~/.emacs.d/elpa/2048-game-20151026.1233/2048-game-autoloads.el" "f:/gtd/privnotes.org" "~/.emacs.d/GTD/orgBoss/IDEA/idea.org" "~/写作创意.org" "~/.emacs.d/elpa/cider-20170905.1037/cider-autoloads.el" "~/.emacs.d/elpa/inflections-20170908.149/inflections-autoloads.el" "~/.emacs.d/elpa/magit-20170908.1344/magit-autoloads.el" "~/.emacs.d/elpa/multiple-cursors-20170908.1452/multiple-cursors-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20170911/org-loaddefs.el" "~/.emacs.d/elpa/org-plus-contrib-20170911/org-plus-contrib-autoloads.el" "~/.emacs.d/elpa/0xc-20170125.1953/0xc-autoloads.el" "~/.emacs.d/elpa/s-20170906.1304/s-autoloads.el" #("c:/Users/YeZhao/AppData/Roaming/.emacs.d/GTD/test.org" 0 53 (ivy-index 0)) #("e:/clojure-home/first-example/src/first_example/helo.org" 0 56 (ivy-index 0)) #("e:/clojure-home/first-example/src/first_example/core.clj" 0 56 (ivy-index 0)) #("e:/clojure-home/" 0 16 (ivy-index 0)) "~/.emacs.d/elpa/ivy-rich-20170716.1924/ivy-rich-autoloads.el" "~/.emacs.d/elpa/all-the-icons-ivy-20170508.25/all-the-icons-ivy-autoloads.el" "~/.emacs.d/elpa/all-the-icons-dired-20170418.1431/all-the-icons-dired-autoloads.el" "~/.emacs.d/elpa/ivy-dired-history-20170625.2256/ivy-dired-history-autoloads.el" "~/.emacs.d/elpa/counsel-20170911.1121/counsel-autoloads.el" "~/.emacs.d/elpa/swiper-20170911.1036/swiper-autoloads.el" "~/.emacs.d/elpa/ivy-20170911.1034/ivy-autoloads.el" "~/.emacs.d/elpa/rich-minority-20170813.622/rich-minority-autoloads.el" "~/.emacs.d/elpa/mo-git-blame-20160129.959/mo-git-blame-autoloads.el" "e:/clojure-home/clojure/pom.xml" "~/.emacs.d/elpa/evil-surround-20170910.1952/evil-surround-autoloads.el" "~/.emacs.d/elpa/evil-20170904.1346/evil-autoloads.el" "~/.emacs.d/elpa/undo-tree-20170706.246/undo-tree-autoloads.el" "~/.emacs.d/elpa/goto-chg-20131228.659/goto-chg-autoloads.el" "d:/cygwin/home/YeZhao/.bashrc" "e:/clojure-home/first-example/src/first_example/hello.md" "~/.emacs.d/README.md" "~/.emacs.d/elpa/markdown-mode+-20170320.1404/markdown-mode+-autoloads.el" "~/.emacs.d/elpa/markdown-mode-20170830.2131/markdown-mode-autoloads.el" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/createFields.H" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/rhoBoundaryTypes.H" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/compressibleCourantNo.H" "c:/logs/rupeng-admin/log.log" "c:/temp/sesvc_11620.log" "c:/temp/sesvc_8596.log" "c:/temp/sesvc_18716.log" "c:/temp/sesvc_196624.log" "c:/temp/sesvc_24364.log" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/物理学与偏微分方程 李大潜 下.pdf" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/数值解v4.docx" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/压力测试带.xml" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/行程明细.xlsx" "c:/ImbaMallLog.txt" "e:/clojure-home/emacs-25.2-x86_64/bin/hello.md" "e:/clojure-home/emacs-25.2-x86_64/bin/daemon" "e:/clojure-home/first-example/src/first_example/test.md" "e:/clojure-home/hello.md" "e:/clojure-home/a.org" "e:/EOPL2014/5010-Program-Design-paradigms/09-2A-space-invaders-2.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/11-3-unify-try1.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/05-4-sets.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/05-2-pizza.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/06-1-recursive-structures.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/04-2-books.rkt"))
(setq-default regexp-search-ring '("company-mode" "sd" "df" "sdsg" "org-mode" "je" "o" "println"))
(setq-default bookmark-history '(#("org-remember-last-stored" 0 24 (bmkp-full-record \.\.\.)) "org-capture-last-stored" "core.clj" #("org-agenda learning<2>" 0 19 (bmkp-full-record \.\.\.)) #("org-agenda learning" 0 19 (bmkp-full-record \.\.\.)) #("cheinsetest<2>" 0 11 (bmkp-full-record \.\.\.)) #("cheinsetest" 0 11 (bmkp-full-record \.\.\.))))
(setq-default buffer-name-history '("calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default command-history '((package-reinstall (quote auto-complete)) (list-packages nil) (package-install (quote company) nil) (package-reinstall (quote company)) (package-reinstall (quote company-anaconda)) (company-mode (quote toggle)) (package-install (quote company-anaconda) nil) (cider-repl-set-ns "clojure.core") (cider-repl-set-ns "first-example.core") (calendar-list-holidays 13) (calendar nil) (package-install (quote cal-china-x) nil) (kill-buffer "calendar.tex") (holidays nil) (eval-expression (quote w) nil) (package-install (quote image+) nil) (org-check-before-date "2017-09-13") (org-occur "java" nil) (customize-variable (quote org-startup-indented)) (org-indent-mode (quote toggle)) (remember nil) (planner-copy-or-move-task "2017.09.13" nil) (plan nil) (package-install (quote 2048-game) nil) (package-autoremove) (package-list-packages nil) (query-replace-regexp "g" "dgdg" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (query-replace-regexp "gsdg" "fuck" t (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (query-replace "gsd" "gdfdgg" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (markdown-export-pdf) (swiper)))
(setq-default counsel-M-x-history '(#("^" 0 1 (ivy-index 0)) #("^package-rein" 0 13 (ivy-index 0)) #("list" 0 4 (ivy-index 0)) #("^package-in" 0 11 (ivy-index 0)) #("^company-mo" 0 11 (ivy-index 0)) #("^pack" 0 5 (ivy-index 0)) #("^list" 0 5 (ivy-index 0)) #("^calendar-li" 0 12 (ivy-index 0)) #("^ca" 0 3 (ivy-index 0)) #("^package" 0 8 (ivy-index 0)) #("^ho" 0 3 (ivy-index 0)) #("^holi" 0 5 (ivy-index 0)) #("^calen" 0 6 (ivy-index 0)) #("^customize-v" 0 12 (ivy-index 0)) #("^org" 0 4 (ivy-index 0)) #("^org-indent-mode" 0 16 (ivy-index 0)) #("^remember" 0 9 (ivy-index 1)) #("^plan" 0 5 (ivy-index 0)) #("remember-notes" 0 14 (ivy-index 0)) #("remember" 0 8 (ivy-index 0)) #("pack" 0 4 (ivy-index 0)) #("package-auto" 0 12 (ivy-index 0)) #("^p" 0 2 (ivy-index 0)) #("^package-lis" 0 12 (ivy-index 0)) #("^dired" 0 6 (ivy-index 0)) #("df" 0 2 (ivy-index 0)) #("^swip" 0 5 (ivy-index 0))))
(setq-default counsel-git-grep-cmd-history '("git --no-pager grep --full-name -n --no-color -i -e \"%s\""))
(setq-default extended-command-history '("counsel-git-grep" "counsel-find-file" "swiper" "ivy-resume" "counsel-el" "counsel-git" "counsel-ag" "ivy-mode" "package-install" "undo-tree-visualizer-mode" "visual-line-mode" "mc/edit-lines" "mc/mark-next-lines" "package-list-packages" "info" "server-start" "cider-jack-in" "cua-mode" "customize" "make-frame" "paredit-mode" "run-scheme" "package-autoremove" "bookmark-bmenu-list" "bookmark-write" "bookmark-save" "bookmark-jump" "bookmark-load"))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("calendar.tex" "TUTORIAL.cn" "test.md"))
(setq-default ido-file-history '("core.clj" "test.md" "hello.md" "a.org" "01-5-area-of-ring.rkt" "01-2-template-examples.rkt" "01-1-f2c.rkt"))
(setq-default ivy-history '(#("aut" 0 3 (ivy-index 0)) #("auto" 0 4 (ivy-index 0)) #("company" 0 7 (ivy-index 49)) #("PhaseVi mesh manufactory" 0 24 (ivy-index 0)) #("compa" 0 5 (ivy-index 0)) "core.clj" "*cider-error*" "clojure.core" #("fir" 0 3 (ivy-index 0)) #("cal-ch" 0 6 (ivy-index 0)) #("cal-c" 0 5 (ivy-index 0)) #("cal-chin" 0 8 (ivy-index 0)) #("image" 0 5 (ivy-index 1)) #("org-startup-in" 0 14 (ivy-index 0)) "2048-game" #("www.orgmode.org/manual/index.html" 0 33 (ivy-index 0)) #("战狼2" 0 3 (ivy-index 0)) #("setting CFD calculation" 0 23 (ivy-index 0)) #("Living Emacs" 0 12 (ivy-index 0)) #("Org Manual " 0 11 (ivy-index 0)) #("get the line contour from image" 0 31 (ivy-index 0)) #("caputre" 0 7 (ivy-index 0)) #("file" 0 4 (ivy-index 0)) #("zeroflag" 0 8 (ivy-index 0))))
(setq-default minibuffer-history '("java" "ivy-rich" "all-the-icons-ivy" "all-the-icons-dired" "ivy-dired-history" "ivy" "smart-mode-line" "mo-git-blame" "evil-define-key" "evil-surround" "file" "save" "Auth-source" "markdown-mode+" "src/first_example/core.clj" "first-example.core" "8" "scheme-complete" "chicken-scheme" "3" "core.clj"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-read-date-history '("   " "q    "))
(setq-default org-tags-history '("@work"))
(setq-default query-replace-history '("dgdg" "g" "fuck" "gsdg" "gdfdgg" "gsd" "hello" "foo" "file" "x" "hel"))
(setq-default read-expression-history '("w"))
(setq-default serial-name-history '("COM1"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default smex-history '(package-reinstall list-packages package-install calendar holidays customize-variable cider-jack-in))
(setq-default string-rectangle-history '("df gf hf hf  fg  h " "sdf dfdf gsd sgsgd " "dfsdfd  fdf  fdsf  "))
(setq-default swiper-history '(#("je" 0 2 (ivy-index 0))))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default tmm--history '("h==>Help" "s==>Subdir" "i==>Immediate" "r==>Regexp" "m==>Mark" "O==>Operate" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
