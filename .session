;;; Automatically generated on Tue Sep 12 00:01:39 2017
;;; Invoked by YeZhao@DESKTOP-YEZHAO using 25.2.1
(setq-default kill-ring '(#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) "(Common User Access)" #("
(defn finny
  [x]
  (println \"dff\" x))
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t) 1 2 (face \.\.\. cider-locals nil fontified t help-echo cider--help-echo) 2 6 (face font-lock-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 6 7 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 7 12 (face font-lock-function-name-face cider-locals \.\.\. fontified t help-echo cider--help-echo) 12 15 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 15 16 (face \.\.\. cider-locals \.\.\. fontified t help-echo cider--help-echo) 16 17 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 17 18 (face \.\.\. cider-locals \.\.\. fontified t help-echo cider--help-echo) 18 19 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 19 21 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 21 22 (face \.\.\. cider-locals \.\.\. fontified t help-echo cider--help-echo) 22 29 (face font-lock-builtin-face cider-locals \.\.\. fontified t help-echo cider--help-echo) 29 30 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 30 35 (face font-lock-string-face cider-locals \.\.\. fontified t help-echo cider--help-echo) 35 37 (cider-locals \.\.\. fontified t help-echo cider--help-echo) 37 38 (face \.\.\. cider-locals \.\.\. fontified t help-echo cider--help-echo) 38 39 (face \.\.\. cider-locals \.\.\. fontified t help-echo cider--help-echo) 39 40 (cider-locals nil fontified t help-echo cider--help-echo rear-nonsticky t)) #("(defn finny
  [x]
  (println \"dff\" x))
" 0 1 (face \.\.\. cider-locals nil help-echo cider--help-echo fontified t) 1 5 (face font-lock-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 6 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 6 11 (face font-lock-function-name-face cider-locals \.\.\. help-echo cider--help-echo fontified t) 11 14 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 14 15 (face \.\.\. cider-locals \.\.\. help-echo cider--help-echo fontified t) 15 16 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 16 17 (face \.\.\. cider-locals \.\.\. help-echo cider--help-echo fontified t) 17 20 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 20 21 (face \.\.\. cider-locals \.\.\. help-echo cider--help-echo fontified t) 21 28 (face font-lock-builtin-face cider-locals \.\.\. help-echo cider--help-echo fontified t) 28 29 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 29 34 (face font-lock-string-face cider-locals \.\.\. help-echo cider--help-echo fontified t) 34 36 (cider-locals \.\.\. help-echo cider--help-echo fontified t) 36 37 (face \.\.\. cider-locals \.\.\. help-echo cider--help-echo fontified t) 37 38 (face \.\.\. cider-locals \.\.\. help-echo cider--help-echo fontified t) 38 39 (cider-locals nil help-echo cider--help-echo fontified t)) "g gsdf   
sdfn

" "-bar, tool-bar and scroll-bar.

" "6" "Modes

Modes are Emacs’ way of switching between key bindings, functionality, syntax highlighting and pretty much any other mutable item in Emacs. Modes are always buffer-specific, and they come in two flavors: major modes and minor modes." "  sg  gsdf  gs" #("==============================================================
user> " 0 63 (font-lock-face font-lock-comment-face fontified t) 63 69 (font-lock-face cider-repl-prompt-face read-only t intangible t field cider-repl-prompt rear-nonsticky \.\.\. fontified t))))
(setq-default session-file-alist '(("f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/createFields.H" 231 97 1 nil nil 231 (overwrite-mode)) ("c:/logs/rupeng-admin/log.log" 2034 nil 1 nil nil 2034 (overwrite-mode)) ("c:/ImbaMallLog.txt" 1 1 1 nil nil 1 (overwrite-mode)) ("e:/clojure-home/emacs-25.2-x86_64/bin/hello.md" 5 1 1 nil nil 5 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/core.clj" 63 110 1 nil nil 64 (overwrite-mode)) ("e:/clojure-home/first-example/src/first_example/test.md" 57 41 1 nil nil 57 (overwrite-mode)) ("e:/clojure-home/hello.md" 26 1 1 nil nil 2 (overwrite-mode)) ("e:/clojure-home/a.org" 143 32 1 nil nil 320 (overwrite-mode)) ("~/.emacs.d/init.el" 1 nil 1 nil nil 7522 (overwrite-mode)) ("~/.emacs.d/GTD/newgtd.org" 676 1 1 nil nil 643 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-5-area-of-ring.rkt" 814 1692 1 nil nil 1778 (overwrite-mode)) ("e:/EOPL2014/5010-Program-Design-paradigms/01-1-f2c.rkt" 949 690 1 nil nil 3 (overwrite-mode)) ("~/.emacs.d/elpa/scheme-complete-20170824.713/scheme-complete-autoloads.el" 256 nil 1 nil nil 256 (overwrite-mode)) ("~/.emacs.d/elpa/chicken-scheme-20141116.1139/chicken-scheme-autoloads.el" 254 nil 1 nil nil 254 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-loaddefs.el" 121974 nil 1 nil nil 121974 (overwrite-mode)) ("~/.emacs.d/elpa/0blayout-20161007.2307/0blayout-autoloads.el" 782 nil 1 nil nil 782 (overwrite-mode)) ("~/.emacs.d/elpa/org-plus-contrib-20170904/org-plus-contrib-autoloads.el" 45706 nil 1 nil nil 45706 (overwrite-mode)) ("i:/xinranUbunutu/MyOrgMode/orgTest.org" 34 34 1 nil nil 34 (overwrite-mode))))
(setq-default file-name-history '("c:/Users/YeZhao/tags" "c:/Users/YeZhao/daemon" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/createFields.H" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/rhoBoundaryTypes.H" "f:/ScienceBase.Attachments/PaperWriting/pdfForLanguage/白/服务器 (2)/.Trash-1000/files/openfoam221.2/applications/solvers/compressible/rhoCentralFoam/compressibleCourantNo.H" "c:/logs/rupeng-admin/log.log" "c:/temp/sesvc_11620.log" "c:/temp/sesvc_8596.log" "c:/temp/sesvc_18716.log" "c:/temp/sesvc_196624.log" "c:/temp/sesvc_24364.log" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/物理学与偏微分方程 李大潜 下.pdf" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/数值解v4.docx" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/压力测试带.xml" "f:/ScienceBase.Attachments/Wang Xiaodongcomments/行程明细.xlsx" "c:/ImbaMallLog.txt" "e:/clojure-home/emacs-25.2-x86_64/bin/hello.md" "e:/clojure-home/first-example/src/first_example/core.clj" "e:/clojure-home/emacs-25.2-x86_64/bin/daemon" "e:/clojure-home/first-example/src/first_example/test.md" "e:/clojure-home/hello.md" "~/.emacs.d/GTD/orgBoss/Vocab/vocab.org" "~/.emacs.d/GTD/orgBoss/Someday/someday.org" "~/.emacs.d/GTD/orgBoss/Private/privnotes.org" "~/.emacs.d/GTD/orgBoss/Journal/journal.org" "~/.emacs.d/GTD/orgBoss/Film/film.org" "~/.emacs.d/GTD/orgBoss/Financial/finances.org" "~/.emacs.d/GTD/orgBoss/DailyReview/daily.org" "~/.emacs.d/GTD/orgBoss/Clipboard/clipboard.org" "~/.emacs.d/GTD/orgBoss/Book/book.org" "~/.emacs.d/GTD/newgtd.org" "e:/clojure-home/a.org" "~/.emacs.d/init.el" "~/.emacs.d/bookmarks" "e:/EOPL2014/5010-Program-Design-paradigms/09-2A-space-invaders-2.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/11-3-unify-try1.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/05-4-sets.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/05-2-pizza.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/06-1-recursive-structures.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/04-2-books.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/01-5-area-of-ring.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/01-2-template-examples.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/01-1-f2c.rkt" "e:/EOPL2014/5010-Program-Design-paradigms/01-4-velocity.rkt" "~/.emacs.d/elpa/scheme-complete-20170824.713/scheme-complete-autoloads.el" "~/.emacs.d/elpa/chicken-scheme-20141116.1139/chicken-scheme-autoloads.el" "~/.emacs.d/elpa/0blayout-20161007.2307/0blayout-autoloads.el" "~/.emacs.d/elpa/org-plus-contrib-20170904/org-loaddefs.el" "~/.emacs.d/elpa/org-plus-contrib-20170904/org-plus-contrib-autoloads.el" "i:/xinranUbunutu/MyOrgMode/orgTest.org" "~/.emacs.d/ido.last" "~/.emacs.d/elpa/session-20120510.1700/session-autoloads.el" "i:/xinranUbunutu/MyOrgMode/newLearningTakecar.org" "i:/xinranUbunutu/MyOrgMode/usecase.org" "i:/xinranUbunutu/MyOrgMode/testChines.org" "i:/xinranUbunutu/MyOrgMode/testgraph.org" "i:/xinranUbunutu/MyOrgMode/state.org" "i:/xinranUbunutu/MyOrgMode/schemeToTime.org" "i:/xinranUbunutu/MyOrgMode/digraph2.png" "i:/xinranUbunutu/MyOrgMode/thinking.org" "~/.emacs.d/elpa/org-plus-contrib-20170828/org-loaddefs.el" "~/.emacs.d/elpa/org-plus-contrib-20170828/org-plus-contrib-autoloads.el" "~/.emacs.d/elpa/clj-refactor-20170720.712/clj-refactor-autoloads.el" "~/.emacs.d/elpa/yasnippet-20170828.1908/yasnippet-autoloads.el" "~/.emacs.d/elpa/multiple-cursors-20170831.1633/multiple-cursors-autoloads.el" "~/.emacs.d/elpa/edn-20160215.419/edn-autoloads.el" "~/.emacs.d/elpa/peg-20150707.2341/peg-autoloads.el"))
(setq-default regexp-search-ring '("o" "println"))
(setq-default bookmark-history '("core.clj" #("org-remember-last-stored" 0 24 (bmkp-full-record \.\.\.)) #("org-agenda learning<2>" 0 19 (bmkp-full-record \.\.\.)) #("org-agenda learning" 0 19 (bmkp-full-record \.\.\.)) #("cheinsetest<2>" 0 11 (bmkp-full-record \.\.\.)) #("cheinsetest" 0 11 (bmkp-full-record \.\.\.))))
(setq-default buffer-name-history '("TUTORIAL.cn" "test.md"))
(setq-default command-history '((server-start nil) (cider-jack-in nil) (find-file "e:/clojure-home/first-example/src/first_example/core.clj") (cider-repl-set-ns "first-example.core") (cua-mode (quote toggle)) (find-file "e:/clojure-home/first-example/src/first_example/test.md") (goto-line 8 nil) (customize) (kill-buffer "TUTORIAL.cn") (make-frame) (switch-to-buffer "test.md") (kill-buffer "test.md") (find-file "e:/clojure-home/hello.md") (find-file "e:/clojure-home/a.org") (find-file "e:/EOPL2014/5010-Program-Design-paradigms/01-5-area-of-ring.rkt") (find-file "e:/EOPL2014/5010-Program-Design-paradigms/01-2-template-examples.rkt") (find-file "e:/EOPL2014/5010-Program-Design-paradigms/01-1-f2c.rkt") (paredit-mode (quote toggle)) (run-scheme "scheme") (package-install (quote scheme-complete) nil) (package-install (quote chicken-scheme) nil) (package-list-packages nil) (package-autoremove) (goto-line 3 nil) (query-replace "foo" "hello" t (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (query-replace "x" "file" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (query-replace "hel" "file" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil nil) (bookmark-bmenu-list) (bookmark-write) (bookmark-save nil) (bookmark-jump #("org-agenda learning" 0 19 ...)) (bookmark-load "~/.emacs.d/bookmarks")))
(setq-default extended-command-history '("server-start" "cider-jack-in" "cua-mode" "customize" "make-frame" "paredit-mode" "run-scheme" "package-install" "package-list-packages" "package-autoremove" "bookmark-bmenu-list" "bookmark-write" "bookmark-save" "bookmark-jump" "bookmark-load"))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("TUTORIAL.cn" "test.md"))
(setq-default ido-file-history '("core.clj" "test.md" "hello.md" "a.org" "01-5-area-of-ring.rkt" "01-2-template-examples.rkt" "01-1-f2c.rkt"))
(setq-default minibuffer-history '("first-example.core" "8" "scheme-complete" "chicken-scheme" "3" "core.clj"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-read-date-history '("   "))
(setq-default query-replace-history '("hello" "foo" "file" "x" "hel"))
(setq-default serial-name-history '("COM1"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default smex-history '(cider-jack-in cua-mode customize make-frame paredit-mode run-scheme package-install))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
